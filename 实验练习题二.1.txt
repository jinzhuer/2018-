#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "hw_memmap.h"
#include "debug.h"
#include "gpio.h"
#include "hw_i2c.h"
#include "hw_types.h"
#include "i2c.h"
#include "pin_map.h"
#include "sysctl.h"
#include "systick.h"
#include "interrupt.h"
#include "uart.h"
#include "hw_ints.h"

#define SYSTICK_FREQUENCY		1000			//1000hz

#define	I2C_FLASHTIME				500				//500mS
#define GPIO_FLASHTIME			300				//300mS
//*****************************************************************************
//
//I2C GPIO chip address and resigster define
//
//*****************************************************************************
#define TCA6424_I2CADDR 					0x22
#define PCA9557_I2CADDR						0x18

#define PCA9557_INPUT							0x00
#define	PCA9557_OUTPUT						0x01
#define PCA9557_POLINVERT					0x02
#define PCA9557_CONFIG						0x03

#define TCA6424_CONFIG_PORT0			0x0c
#define TCA6424_CONFIG_PORT1			0x0d
#define TCA6424_CONFIG_PORT2			0x0e

#define TCA6424_INPUT_PORT0				0x00
#define TCA6424_INPUT_PORT1				0x01
#define TCA6424_INPUT_PORT2				0x02

#define TCA6424_OUTPUT_PORT0			0x04
#define TCA6424_OUTPUT_PORT1			0x05
#define TCA6424_OUTPUT_PORT2			0x06




void 		Delay(uint32_t value);
void 		S800_GPIO_Init(void);
uint8_t 	I2C0_WriteByte(uint8_t DevAddr, uint8_t RegAddr, uint8_t WriteData);
uint8_t 	I2C0_ReadByte(uint8_t DevAddr, uint8_t RegAddr);
void		S800_I2C0_Init(void);
void 		S800_UART_Init(void);
//systick software counter define
volatile uint16_t systick_10ms_couter = 10, systick_100ms_couter = 100;
volatile uint8_t	systick_10ms_status = 0, systick_100ms_status = 0;

volatile uint8_t result, cnt, key_value, gpio_status;
volatile uint8_t rightshift = 0x01;
uint32_t ui32SysClock, ui32IntPriorityGroup, ui32IntPriorityMask;
uint32_t ui32IntPrioritySystick, ui32IntPriorityUart0;
uint8_t seg7[] = { 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x58,0x5e,0x079,0x71,0x5c };
uint8_t disp_buff[8];
uint8_t uart_receive_char;
uint8_t uart_receive_string[100];
uint8_t uart_send_string[100];
static int i, j;
volatile static int sec = 0, min = 59, hour = 0;
volatile static int xuehao = 5160;
volatile static bool temp1 = 1;
volatile static bool temp2 = 0;
volatile static bool run = 1;
volatile static bool shun = 1;
volatile static int counter = -1;

//the disp_tab and disp_tab_7seg must be the Corresponding relation
//the last character should be the space(not display) character
char const disp_tab[] = { '0','1','2','3','4','5',     //the could display char and its segment code   
'6','7','8','9','A','b',
'C','d','E','F',
'H','L','P','o',
'.','-','_',' ' };
char const disp_tab_7seg[] = { 0x3F,0x06,0x5B,0x4F,0x66,0x6D,
0x7D,0x07,0x7F,0x6F,0x77,0x7C,
0x39,0x5E,0x79,0x71,
0x76,0x38,0x73,0x5c,
0x80,0x40, 0x08,0x00 };
char ASCII2Disp(char *buff);
int main(void)
{
	volatile uint16_t	i2c_flash_cnt, gpio_flash_cnt;
	//use internal 16M oscillator, PIOSC
	//ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_16MHZ |SYSCTL_OSC_INT |SYSCTL_USE_OSC), 16000000);		
	//ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_16MHZ |SYSCTL_OSC_INT |SYSCTL_USE_OSC), 8000000);		
	//use external 25M oscillator, MOSC
	//ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |SYSCTL_OSC_MAIN |SYSCTL_USE_OSC), 25000000);		

	//use external 25M oscillator and PLL to 120M
	//ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |SYSCTL_OSC_MAIN | SYSCTL_USE_PLL |SYSCTL_CFG_VCO_480), 120000000);;		
	ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_16MHZ | SYSCTL_OSC_INT | SYSCTL_USE_PLL | SYSCTL_CFG_VCO_480), 20000000);

	SysTickPeriodSet(ui32SysClock / SYSTICK_FREQUENCY);
	SysTickEnable();
	SysTickIntEnable();

	S800_GPIO_Init();
	S800_I2C0_Init();
	S800_UART_Init();

	IntEnable(INT_UART0);
	UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);
	IntMasterEnable();

	ui32IntPriorityMask = IntPriorityMaskGet();
	IntPriorityGroupingSet(3);														//Set all priority to pre-emtption priority

	IntPrioritySet(INT_UART0, 3);													//Set INT_UART0 to highest priority
	IntPrioritySet(FAULT_SYSTICK, 0x0e0);									//Set INT_SYSTICK to lowest priority

	ui32IntPriorityGroup = IntPriorityGroupingGet();

	ui32IntPriorityUart0 = IntPriorityGet(INT_UART0);
	ui32IntPrioritySystick = IntPriorityGet(FAULT_SYSTICK);


	while (1)
	{
		if (temp1 == 1) temp1 = GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0);				//read the PJ0 key value
		if (temp1 == 0) temp2 = GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0);
		if (temp1 == 0 && temp2 == 1)
		{                                     // press shortly once 
			counter++;
			counter = counter % 5;

			temp1 = 1; temp2 = 0;
		}


		if (systick_10ms_status&&counter == 0)
		{
			systick_10ms_status = 0;
			if (++gpio_flash_cnt >= 50)
			{
				gpio_flash_cnt = 0;
				if (gpio_status)
					result = I2C0_WriteByte(PCA9557_I2CADDR, PCA9557_OUTPUT, ~60);
				else
					result = I2C0_WriteByte(PCA9557_I2CADDR, PCA9557_OUTPUT, ~0);
				gpio_status = !gpio_status;

			}

		}
		if (systick_100ms_status&&counter == 0)
		{
			systick_100ms_status = 0;
			if (++i2c_flash_cnt >= 10)
			{
				i2c_flash_cnt = 0;
				if (shun == 1)
				{
					xuehao++;
					sec++;
					if (sec == 60) {
						sec = 0; min++;
					}
					if (min == 60) {
						min = 0;
					}

				}
				else
				{
					sec--;
					if (sec == 0) {
						sec = 59; min--;
					}
					if (min == 0) {
						min = 59;
					}

				}

				cnt++;
				rightshift = rightshift << 1;
				if (cnt == 8) { cnt = 0; rightshift = 0x01; }

			}
		}//


		sprintf(disp_buff, "  %04d  ",xuehao);
		//sprintf(disp_buff, "%08s", "19981010");   // any given 8 wei string
		for (j = 0; j<8; j++) {
			result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT1, ASCII2Disp(disp_buff + j));
			result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT2, 0x1 << j);
			result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT2, 0x0);
		}

		/*		//PaoMaDeng  use this
		result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT1, ASCII2Disp(disp_buff + cnt));
		result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT2, rightshift);
		result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_OUTPUT_PORT2, 0x0);
		*/

	}



}
char ASCII2Disp(char *buff)
{
	char * pcDisp;
	pcDisp = (char*)strchr(disp_tab, *buff);
	if (pcDisp == NULL)
		return 0x0;
	else

		return (disp_tab_7seg[pcDisp - disp_tab]);

}

void Delay(uint32_t value)
{
	uint32_t ui32Loop;
	for (ui32Loop = 0; ui32Loop < value; ui32Loop++) {};
}


void UARTStringPut(const char *cMessage)
{
	while (*cMessage != '\0')
		UARTCharPut(UART0_BASE, *(cMessage++));
}
void UARTStringPutNonBlocking(const char *cMessage)
{
	while (*cMessage != '\0')
		UARTCharPutNonBlocking(UART0_BASE, *(cMessage++));
}
void S800_UART_Init(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);						//Enable PortA
	while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));			//Wait for the GPIO moduleA ready

	GPIOPinConfigure(GPIO_PA0_U0RX);												// Set GPIO A0 and A1 as UART pins.
	GPIOPinConfigure(GPIO_PA1_U0TX);

	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	// Configure the UART for 115,200, 8-N-1 operation.
	UARTConfigSetExpClk(UART0_BASE, ui32SysClock, 115200, (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
	UARTStringPut((uint8_t *)"\r\nHello, world!\r\n");
}
void S800_GPIO_Init(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);						//Enable PortF
	while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF));			//Wait for the GPIO moduleF ready
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ);						//Enable PortJ	
	while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOJ));			//Wait for the GPIO moduleJ ready	
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);						//Enable PortN	
	while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION));			//Wait for the GPIO moduleN ready		

	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4);

	GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1);//Set the PJ0,PJ1 as input pin
	GPIOPadConfigSet(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
}

void S800_I2C0_Init(void)
{
	uint8_t result;
	SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
	GPIOPinConfigure(GPIO_PB2_I2C0SCL);
	GPIOPinConfigure(GPIO_PB3_I2C0SDA);
	GPIOPinTypeI2CSCL(GPIO_PORTB_BASE, GPIO_PIN_2);
	GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_3);

	I2CMasterInitExpClk(I2C0_BASE, ui32SysClock, true);										//config I2C0 400k
	I2CMasterEnable(I2C0_BASE);

	result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_CONFIG_PORT0, 0x0ff);		//config port 0 as input
	result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_CONFIG_PORT1, 0x0);			//config port 1 as output
	result = I2C0_WriteByte(TCA6424_I2CADDR, TCA6424_CONFIG_PORT2, 0x0);			//config port 2 as output 

	result = I2C0_WriteByte(PCA9557_I2CADDR, PCA9557_CONFIG, 0x00);					//config port as output
	result = I2C0_WriteByte(PCA9557_I2CADDR, PCA9557_OUTPUT, 0x0ff);				//turn off the LED1-8

}


uint8_t I2C0_WriteByte(uint8_t DevAddr, uint8_t RegAddr, uint8_t WriteData)
{
	uint8_t rop;
	while (I2CMasterBusy(I2C0_BASE)) {};
	I2CMasterSlaveAddrSet(I2C0_BASE, DevAddr, false);
	I2CMasterDataPut(I2C0_BASE, RegAddr);
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_START);
	while (I2CMasterBusy(I2C0_BASE)) {};
	rop = (uint8_t)I2CMasterErr(I2C0_BASE);

	I2CMasterDataPut(I2C0_BASE, WriteData);
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_FINISH);
	while (I2CMasterBusy(I2C0_BASE)) {};

	rop = (uint8_t)I2CMasterErr(I2C0_BASE);
	return rop;
}

uint8_t I2C0_ReadByte(uint8_t DevAddr, uint8_t RegAddr)
{
	uint8_t value, rop;
	while (I2CMasterBusy(I2C0_BASE)) {};
	I2CMasterSlaveAddrSet(I2C0_BASE, DevAddr, false);
	I2CMasterDataPut(I2C0_BASE, RegAddr);
	//	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_START);		
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);
	while (I2CMasterBusBusy(I2C0_BASE));
	rop = (uint8_t)I2CMasterErr(I2C0_BASE);
	Delay(1);
	//receive data
	I2CMasterSlaveAddrSet(I2C0_BASE, DevAddr, true);
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
	while (I2CMasterBusBusy(I2C0_BASE));
	value = I2CMasterDataGet(I2C0_BASE);
	Delay(1);
	return value;
}

/*
Corresponding to the startup_TM4C129.s vector table systick interrupt program name
*/
void SysTick_Handler(void)
{
	if (systick_100ms_couter != 0)
		systick_100ms_couter--;
	else
	{
		systick_100ms_couter = 100;
		systick_100ms_status = 1;
	}

	if (systick_10ms_couter != 0)
		systick_10ms_couter--;
	else
	{
		systick_10ms_couter = SYSTICK_FREQUENCY / 100;
		systick_10ms_status = 1;
	}
	/*	if (GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_1) == 0)   //if PJ1(SW2) ,pause tick
	{
	systick_100ms_status = systick_10ms_status = 0;
	GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0);
	}
	else
	GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0);
	*/
}



/*
Corresponding to the startup_TM4C129.s vector table UART0_Handler interrupt program name
*/
void UART0_Handler(void)
{
	int32_t uart0_int_status;
	uart0_int_status = UARTIntStatus(UART0_BASE, true);		// Get the interrrupt status.
	UARTIntClear(UART0_BASE, uart0_int_status);								//Clear the asserted interrupts

	for (j = 0; j<100; j++) uart_receive_string[j] = 0;  //clear 
	i = 0;

	while (UARTCharsAvail(UART0_BASE))    											// Loop while there are characters in the receive FIFO.
	{
		// UARTCharPutNonBlocking(UART0_BASE,UARTCharGetNonBlocking(UART0_BASE));
		uart_receive_string[i] = UARTCharGetNonBlocking(UART0_BASE);
		Delay(1000);  //don't delete
		i++;

		GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, GPIO_PIN_1);

	}

	uart_receive_string[i] = '\0';

	GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, 0);
	if (!strncasecmp(uart_receive_string, "SET", 3)) {//strncasecmp (ignore daxiao xie)
													  // can select how many wei to compare
		hour = 10 * (uart_receive_string[3] - '0') + (uart_receive_string[4] - '0');
		min = 10 * (uart_receive_string[6] - '0') + (uart_receive_string[7] - '0');
		sec = 10 * (uart_receive_string[9] - '0') + (uart_receive_string[10] - '0');

		sprintf(uart_send_string, "%s%02d%s%02d%s%02d", "TIME", hour, "-", min, "-", sec);
		UARTStringPutNonBlocking(uart_send_string);
	}
	else if (!strncasecmp(uart_receive_string, "INC", 3)) {
		hour = hour + 10 * (uart_receive_string[3] - '0') + (uart_receive_string[4] - '0');
		min = min + 10 * (uart_receive_string[6] - '0') + (uart_receive_string[7] - '0');
		sec = sec + 10 * (uart_receive_string[9] - '0') + (uart_receive_string[10] - '0');

		min = min + sec / 60; sec = sec % 60;
		hour = hour + min / 60; min = min % 60;
		hour = hour % 60;

		sprintf(uart_send_string, "%s%02d%s%02d%s%02d", "TIME", hour, "-", min, "-", sec);
		UARTStringPutNonBlocking(uart_send_string);
	}
	else if (!strcasecmp(uart_receive_string, "a"))
	{
		run = 1; shun = 0;
	}
	else if (!strcasecmp(uart_receive_string, "b"))   //strcasecmp (ignore daxiao xie)
		run = 0;                  //strcmp     if equal ,then return 0
	else if (!strcasecmp(uart_receive_string, "c"))
	{
		run = 1; shun = 1;
	}
	else if (!strcasecmp(uart_receive_string, "d"))
	{
		run = 1;
		sec = 0; min = 0;
	}
	GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, 0);
}
